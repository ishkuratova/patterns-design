class Employee:
    def __init__(self, employee_id, first_name, last_name, patronymic, salary):
        self._employee_id = self.validate_employee_id(employee_id)
        self._first_name = self.validate_first_name(first_name)
        self._last_name = self.validate_last_name(last_name)
        self._patronymic = self.validate_patronymic(patronymic)
        self._salary = self.validate_salary(salary)


    @staticmethod
    def validate_employee_id(employee_id):
        if not isinstance(employee_id, int) or employee_id <= 0:
            raise ValueError("Employee ID must be a positive integer")
        return employee_id

    @staticmethod
    def validate_name(value, is_patronymic=False):
        if is_patronymic:
            if value is None:
                return None
            if not isinstance(value, str):
                raise ValueError("Patronymic must be None or a string")
            if len(value.strip()) == 0:
                return None
            return value.strip()
        else:
            if not isinstance(value, str) or len(value.strip()) == 0:
                raise ValueError("name must be a non-empty string")
            return value.strip()

    @staticmethod
    def validate_salary(salary):
        if not isinstance(salary, int) or salary < 0:
            raise ValueError("Salary must be a non-negative integer")
        return salary

    @property
    def employee_id(self):
        return self._employee_id

    @property
    def first_name(self):
        return self._first_name

    @first_name.setter
    def first_name(self, value):
        self._first_name = value

    @property
    def last_name(self):
        return self._last_name

    @last_name.setter
    def last_name(self, value):
        self._last_name = value

    @property
    def patronymic(self):
        return self._patronymic

    @patronymic.setter
    def patronymic(self, value):
        self._patronymic = value

    @property
    def salary(self):
        return self._salary

    @salary.setter
    def salary(self, value):
        self._salary = value

    def get_full_name(self):
        parts = [self._last_name, self._first_name]
        if self._patronymic:
            parts.append(self._patronymic)
        return " ".join(parts)

    def __str__(self):
        return f"Employee {self.employee_id}: {self.get_full_name()}, Salary: {self._salary}"

    def __repr__(self):
        return (f"Employee(employee_id={self._employee_id}, first_name='{self._first_name}', "
                f"last_name='{self._last_name}', patronymic='{self._patronymic}', salary={self._salary})")
